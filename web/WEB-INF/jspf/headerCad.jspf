<%-- any content can be specified here e.g.: --%>
<%@ page pageEncoding="UTF-8" %>

<div id="session">

    <nav v-if="data" class="navbar navbar-expand-lg bg-bdy-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" href="index2.jsp"><i class="bi bi-p-square"></i>&nbsp;ReadAI2</a>
            <button class="navbar-toggier" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarText">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link" href="index.jsp">Home</a>
                    </li>
                    <li class="nav-item" v-if="data.role === 'ADMIN'">
                        <a class="nav-link" href="portal.jsp">Users</a>
                    </li>
                </ul>
                <span class="navbar-text">
                    <i class="bi bi-person"></i>{{ data.name }} <button @click="logout()" class="btn btn-sm btn-danger" type="button"><i class="bi bi-arrow-right-circle"></i></button>
                </span>
            </div>
        </div>
    </nav>

    <div v-else>
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="d-flex justify-content-center mt-3 mb-3">
                        <button @click="showLoginForm = true" :class="{'btn-primary': showLoginForm, 'btn-outline-primary': !showLoginForm}" class="btn me-2">Login</button>
                        <button @click="showLoginForm = false" :class="{'btn-success': !showLoginForm, 'btn-outline-success': showLoginForm}" class="btn">Cadastre-se</button>
                    </div>

                    <div v-if="error" class="alert alert-danger m-2" role="alert">
                        {{ error }}
                    </div>
                    <div v-if="message" class="alert alert-success m-2" role="alert">
                        {{ message }}
                    </div>

                    <div class="card m-2 mb-4" v-if="showLoginForm">
                        <div class="card-header">
                            <h1><i class="bi bi-p-square"></i>&nbsp;ReadAI2 - Login</h1>
                        </div>
                        <div class="card-body">
                            <form @submit.prevent="login()">
                                <div class="mb-3">
                                    <label class="form-label">Login/Username:</label>
                                    <input v-model="loginUsername" type="text" class="form-control">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Senha:</label>
                                    <input v-model="loginPassword" type="password" class="form-control">
                                </div>
                                <button type="submit" class="btn btn-primary">Login</button>
                            </form>
                        </div>
                    </div>

                    <div class="card m-2" v-else> <div class="card-header bg-success text-white">
                            <h1><i class="bi bi-person-plus"></i>&nbsp;Cadastre-se no ReadAI2</h1>
                        </div>
                        <div class="card-body">
                            <form @submit.prevent="registerUser()">
                                <div class="mb-3">
                                    <label class="form-label">Login (Username):</label>
                                    <input v-model="registerLogin" type="text" class="form-control" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Nome:</label>
                                    <input v-model="registerName" type="text" class="form-control" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Sobrenome:</label>
                                    <input v-model="registerSobrenome" type="text" class="form-control">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">E-mail:</label>
                                    <input v-model="registerEmail" type="email" class="form-control" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Senha:</label>
                                    <input v-model="registerPassword" type="password" class="form-control" required>
                                    <div class="form-text text-muted">A senha deve ter pelo menos 6 caracteres.</div>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Confirmar Senha:</label>
                                    <input v-model="registerConfirmPassword" type="password" class="form-control" required>
                                </div>
                                <button type="submit" class="btn btn-success">Cadastrar</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    const shared = Vue.reactive({ session: null }); // Estado global compartilhado

    const sessionApp = Vue.createApp({
        data() {
            return {
                shared: shared,
                error: null,
                message: null,
                showLoginForm: true, // NOVA PROPRIEDADE PARA CONTROLAR A VISIBILIDADE DO FORMULÁRIO

                loginUsername: '',
                loginPassword: '',
                data: null, // Dados da sessão do usuário logado (nome, role, etc.)

                registerLogin: '',
                registerName: '',
                registerSobrenome: '',
                registerEmail: '',
                registerPassword: '',
                registerConfirmPassword: ''
            };
        },
        methods: {
            async request(url, method, data = null) {
                this.error = null;
                this.message = null;

                try {
                    const options = {
                        method: method,
                        headers: {
                            "Content-Type": "application/json"
                        }
                    };
                    if (data) {
                        options.body = JSON.stringify(data);
                    }

                    const response = await fetch(url, options);
                    const responseData = await response.json().catch(() => ({}));

                    if (response.ok) {
                        return responseData;
                    } else {
                        this.error = responseData.error || `Erro: ${response.status} ${response.statusText}`;
                        return null;
                    }
                } catch (e) {
                    this.error = "Erro de rede ou servidor: " + e.message;
                    console.error("Erro na requisição:", e);
                    return null;
                }
            },

            async loadSession() {
                const sessionData = await this.request("/ReadAI2/api/session", "GET"); // Renomeado para evitar conflito com 'data'
                if (sessionData) {
                    this.data = sessionData; // O objeto 'data' no seu componente recebe os dados da sessão
                    this.error = null;
                    this.shared.session = this.data; // Atualiza o estado global compartilhado
                } else {
                    this.data = null;
                    if (this.error === "No session" || this.error === "Unauthorized: no session") {
                        this.error = null;
                    }
                    this.shared.session = null;
                }
            },

            async login() {
                if (!this.loginUsername || !this.loginPassword) {
                    this.error = "Login e senha são obrigatórios.";
                    return;
                }

                const loggedInData = await this.request( // Renomeado para evitar conflito com 'data'
                    "/ReadAI2/api/session",
                    "PUT",
                    { "login": this.loginUsername, "password": this.loginPassword }
                );
                if (loggedInData) {
                    this.data = loggedInData; // O objeto 'data' no seu componente recebe os dados do login
                    this.error = null;
                    this.message = "Login realizado com sucesso!";
                    this.shared.session = this.data; // Atualiza o estado global compartilhado
                    this.loginUsername = '';
                    this.loginPassword = '';
                } else {
                    this.data = null;
                    this.shared.session = null;
                }
            },

            async logout() {
                const logoutResult = await this.request("/ReadAI2/api/session", "DELETE"); // Renomeado para evitar conflito com 'data'
                if (logoutResult) {
                    this.data = null;
                    this.error = null;
                    this.message = "Logout realizado com sucesso!";
                    this.shared.session = null;
                } else {
                    // O erro já é setado pelo método 'request'
                }
            },

            async registerUser() {
                
                this.message = null;
                this.error = null;

                if (!this.registerLogin || !this.registerName || !this.registerEmail || !this.registerPassword || !this.registerConfirmPassword) {
                    this.error = "Todos os campos marcados são obrigatórios.";
                    return;
                }
                if (this.registerPassword.length < 6) {
                    this.error = "A senha deve ter pelo menos 6 caracteres.";
                    return;
                }
                if (this.registerPassword !== this.registerConfirmPassword) {
                    this.error = "As senhas não coincidem.";
                    return;
                }

                const userData = {
                    login: this.registerLogin,
                    nome: this.registerName,
                    sobrenome: this.registerSobrenome,
                    email: this.registerEmail,
                    password: this.registerPassword
                };

                const registerResult = await this.request( // Renomeado para evitar conflito com 'data'
                    "/ReadAI2/api/users",
                    "PUT",
                    userData
                );

                if (registerResult) {
                    this.message = registerResult.message || "Usuário cadastrado com sucesso! Faça login para continuar.";
                    this.error = null;
                    // Limpar formulário de cadastro após sucesso
                    this.registerLogin = '';
                    this.registerName = '';
                    this.registerSobrenome = '';
                    this.registerEmail = '';
                    this.registerPassword = '';
                    this.registerConfirmPassword = '';
                    this.showLoginForm = true; // Volta para o formulário de login após o cadastro
                    
                    this.showLoginForm = true;
                } else {
                    // O erro já é setado pelo método 'request'
                }
            }
        },
        mounted() {
            this.loadSession();
        }
    };

    sessionApp.mount('#session');
</script>-->