<%-- any content can be specified here e.g.: --%>
<%@ page pageEncoding="UTF-8" %>


<title>Login / Cadastro - ReadAI2</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
</head>
<body>

    <div id="session">

        <nav v-if="data" class="navbar navbar-expand-lg bg-bdy-tertiary">
            <div class="container-fluid">
                <a class="navbar-brand" href="index.jsp"><i class="bi bi-p-square"></i>&nbsp;ReadAI2</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarText">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item">
                            <a class="nav-link" href="index.jsp">Home</a>
                        </li>
                        <li class="nav-item" v-if="data.role === 'ADMIN'">
                            <a class="nav-link" href="portal.jsp">Users</a>
                        </li>
                    </ul>
                    <span class="navbar-text">
                        <i class="bi bi-person"></i>{{ data.name }} <button @click="logout()" class="btn btn-sm btn-danger" type="button"><i class="bi bi-arrow-right-circle"></i></button>
                    </span>
                </div>
            </div>
        </nav>

        <div v-else>
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="d-flex justify-content-center mt-3 mb-3">
                            <button @click="showLoginForm = true; clearMessages()" :class="{'btn-primary': showLoginForm, 'btn-outline-primary': !showLoginForm}" class="btn me-2">Login</button>
                            <button @click="showLoginForm = false; clearMessages()" :class="{'btn-success': !showLoginForm, 'btn-outline-success': showLoginForm}" class="btn">Cadastre-se</button>
                        </div>

                        <div v-if="error" class="alert alert-danger m-2" role="alert">
                            {{ error }}
                        </div>
                        <div v-if="message" class="alert alert-success m-2" role="alert">
                            {{ message }}
                        </div>

                        <div v-if="showLoginForm">
                            <div class="card m-2 mb-4">
                                <div class="card-header">
                                    <h1><i class="bi bi-p-square"></i>&nbsp;ReadAI2 - Login</h1>
                                </div>
                                <div class="card-body">
                                    <form @submit.prevent="login()">
                                        <div class="mb-3">
                                            <label class="form-label">Login/Username:</label>
                                            <input v-model="loginUsername" type="text" class="form-control" required>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Senha:</label>
                                            <input v-model="loginPassword" type="password" class="form-control" required>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Login</button>
                                    </form>
                                </div>
                            </div>
                        </div>

                        <div v-else>
                            <div class="card m-2">
                                <div class="card-header bg-success text-white">
                                    <h1><i class="bi bi-person-plus"></i>&nbsp;Cadastre-se no ReadAI2</h1>
                                </div>
                                <div class="card-body">
                                    <form @submit.prevent="registerUser()">
                                        <div class="mb-3">
                                            <label class="form-label">Login (Username):</label>
                                            <input v-model="registerLogin" type="text" class="form-control" required>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Nome:</label>
                                            <input v-model="registerName" type="text" class="form-control" required>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Sobrenome:</label>
                                            <input v-model="registerSobrenome" type="text" class="form-control">
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">E-mail:</label>
                                            <input v-model="registerEmail" type="email" class="form-control" required>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Senha:</label>
                                            <input v-model="registerPassword" type="password" class="form-control" required>
                                            <div class="form-text text-muted">A senha deve ter pelo menos 6 caracteres.</div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Confirmar Senha:</label>
                                            <input v-model="registerConfirmPassword" type="password" class="form-control" required>
                                        </div>
                                        <button type="submit" class="btn btn-success">Cadastrar</button>
                                    </form>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
const shared = Vue.reactive({session: null});
const sessionApp = Vue.createApp({
data() {
return {
shared: shared,
        // Variável para controlar qual formulário está visível
        showLoginForm: true, // true: mostra login; false: mostra cadastro

        error: null, // Mensagem de erro para login ou cadastro
        message: null, // Mensagem de sucesso para login ou cadastro

        // Variáveis para o formulário de LOGIN
        loginUsername: '',
        loginPassword: '',
        data: null, // Dados da sessão do usuário logado

        // Variáveis para o formulário de CADASTRO (prefixo 'register' para evitar conflito)
        registerLogin: '',
        registerName: '',
        registerSobrenome: '',
        registerEmail: '',
        registerPassword: '',
        registerConfirmPassword: ''
};
},
        methods: {
        // Método para limpar mensagens de erro/sucesso ao trocar de formulário
        clearMessages() {
        this.error = null;
        this.message = null;
        },
                // Método genérico para requisições à API
                async request(url, method, data = null) {
        // Não limpa error/message aqui, pois a função clearMessages() é chamada ao trocar formulários
        try {
        const options = {
        method: method,
                headers: {"Content-Type": "application/json"}
        };
        if (data) {
        options.body = JSON.stringify(data);
        }
        const response = await fetch(url, options);
        const responseData = await response.json().catch(() => ({}));
        if (response.ok) {
        return responseData;
        } else {
        // Se houver um erro, defina a mensagem de erro da resposta
        this.error = responseData.error || `Erro: ${response.status} ${response.statusText}`;
        return null;
        }
        } catch (e) {
        this.error = "Erro de rede ou servidor: " + e.message;
        console.error("Erro na requisição:", e);
        return null;
        }
        
        },
        // --- Lógica de Sessão (Login/Logout) ---
        async loadSession() {
const data = await this.request("/ReadAI2/api/session", "GET");
if (data) {
this.data = data; // Se houver sessão, armazena os dados do usuário
this.error = null; // Limpa erros se a sessão for carregada com sucesso
this.shared.session = this.data; // Atualiza o estado compartilhado
// Redireciona para a página principal após login (opcional, se quiser uma dashboard)
// window.location.href = 'portal.jsp'; 
} else {
this.data = null; // Nenhuma sessão ativa
this.shared.session = null;
// Se o erro for "No session" (esperado), não exibe a mensagem de erro
if (this.error === "Não autorizado: nenhuma sessão ativa." || this.error === "Unauthorized: no session") {
this.error = null;
}
}
},
        async login() {
this.clearMessages(); // Limpa mensagens ao tentar login
if (!this.loginUsername || !this.loginPassword) {
this.error = "Login e senha são obrigatórios.";
return;
}

const data = await this.request(
        "/ReadAI2/api/session",
        "POST",
{"login": this.loginUsername, "password": this.loginPassword}
);
if (data) {
this.data = data;
this.error = null;
this.message = "Login realizado com sucesso!";
this.shared.session = this.data;
// Limpar campos de login após sucesso
this.loginUsername = '';
this.loginPassword = '';
// Opcional: redirecionar para a página principal após o login
// window.location.href = 'index2.jsp'; // Exemplo
} else {
// O erro já é setado pelo método 'request'
this.data = null;
this.shared.session = null;
}
},
        async logout() {
const data = await this.request("/ReadAI2/api/session", "DELETE");
if (data) {
this.data = null;
this.error = null;
this.message = "Logout realizado com sucesso!";
this.shared.session = null;
// Opcional: redirecionar para a página de login após o logout
// window.location.href = 'index.jsp'; // Exemplo
} else {
// O erro já é setado pelo método 'request'
}
},
        // --- Lógica de Cadastro (POST /api/users) ---
        async registerUser() {
this.clearMessages(); // Limpa mensagens ao tentar cadastro

// Validações no frontend
if (!this.registerLogin || !this.registerName || !this.registerEmail || !this.registerPassword || !this.registerConfirmPassword) {
this.error = "Todos os campos marcados são obrigatórios.";
return;
}
if (this.registerPassword.length < 6) {
this.error = "A senha deve ter pelo menos 6 caracteres.";
return;
}
if (this.registerPassword !== this.registerConfirmPassword) {
this.error = "As senhas não coincidem.";
return;
}

const userData = {
login: this.registerLogin,
        nome: this.registerName,
        sobrenome: this.registerSobrenome,
        email: this.registerEmail,
        password: this.registerPassword
};
const data = await this.request(
        "/ReadAI2/api/users", // Endpoint correto para cadastro
        "POST", // Método HTTP correto para cadastro
        userData
        );
if (data) {
this.message = data.message || "Usuário cadastrado com sucesso! Você pode fazer login agora.";
this.error = null;
// Limpar formulário de cadastro após sucesso
this.registerLogin = '';
this.registerName = '';
this.registerSobrenome = '';
this.registerEmail = '';
this.registerPassword = '';
this.registerConfirmPassword = '';
// Opcional: Alternar para o formulário de login após o cadastro
this.showLoginForm = true;
} else {
// O erro já é setado pelo método 'request'
}
}
},
    // ... outros métodos (clearMessages, request, login, registerUser) ...

    initializeFormMode() { // <--- Não precisa de 'async' aqui
        const urlParams = new URLSearchParams(window.location.search);
        const mode = urlParams.get('mode');

        if (mode === 'register') {
            this.showLoginForm = false;
        } else {
            this.showLoginForm = true;
        }
        
    },


        mounted() {
this.loadSession(); // Ao carregar a página, verifica se já há uma sessão
    this.initializeFormMode();

}
});
sessionApp.mount('#session');
    </script>
